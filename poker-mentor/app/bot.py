import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from app.config import config
from app.database import db
from app.poker_engine import PokerGame, Action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PokerMentorBot:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        is_valid, message = config.validate()
        if not is_valid:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {message}")
            raise ValueError(message)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        self.token = config.get('TELEGRAM_BOT_TOKEN')
        self.application = Application.builder().token(self.token).build()
        self.active_games = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        self._setup_handlers()
        logger.info("Poker Mentor Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.show_help))
        self.application.add_handler(CommandHandler("settings", self.settings))
        self.application.add_handler(CommandHandler("test_game", self.test_game))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user = db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = db.get_user_stats(db_user['id'])
        hands_played = user_stats['total_hands_played'] if user_stats else 0
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Mentor, {user.first_name}!

–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {db_user['level'].title()} üéì
–°—ã–≥—Ä–∞–Ω–æ —Ä–∞–∑–¥–∞—á: {hands_played}

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üéÆ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ AI —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ä–∞–∑–¥–∞—á  
‚Ä¢ üìö –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!

üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_game
        """
        
        keyboard = [
            ["üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É"],
            ["üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏", "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üìö –û–±—É—á–µ–Ω–∏–µ", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"New user started: {user.id} - {user.username}")
    
    async def test_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
        user = update.effective_user
        user_id = str(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        game = PokerGame([f"user_{user_id}", "AI_Fish"])
        game.start_hand()
        game.post_blinds()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        self.active_games[user_id] = game
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cards = game.player_cards[f"user_{user_id}"]
        
        await update.message.reply_text(
            f"üéÆ –¢–ï–°–¢–û–í–ê–Ø –ò–ì–†–ê!\n\n"
            f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards[0]} {user_cards[1]}\n"
            f"üí∞ –í–∞—à —Å—Ç–µ–∫: {game.player_stacks[f'user_{user_id}']} BB\n"
            f"üè¶ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {game.pot} BB\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await self.show_game_actions(update, context, user_id)
    
    async def show_game_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ"""
        game = self.active_games.get(user_id)
        if not game:
            await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            return
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì• –ö–æ–ª–ª", callback_data="game_call")],
            [InlineKeyboardButton("üì§ –†–µ–π–∑", callback_data="game_raise")],
            [InlineKeyboardButton("‚ùå –§–æ–ª–¥", callback_data="game_fold")],
            [InlineKeyboardButton("‚öñÔ∏è –ß–µ–∫", callback_data="game_check")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —É–ª–∏—Ü—É
        street = "–ü—Ä–µ—Ñ–ª–æ–ø"
        if len(game.community_cards) >= 3:
            street = "–§–ª–æ–ø"
        if len(game.community_cards) >= 4:
            street = "–¢–µ—Ä–Ω"
        if len(game.community_cards) >= 5:
            street = "–†–∏–≤–µ—Ä"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéØ –¢–µ–∫—É—â–∞—è —É–ª–∏—Ü–∞: {street}\n"
                 f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {game.current_bet} BB\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def handle_button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(update.effective_user.id)
        action = query.data
        
        game = self.active_games.get(user_id)
        if not game:
            await query.edit_message_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /test_game")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if action == "game_fold":
            await self.handle_fold(query, user_id)
        elif action == "game_call":
            await self.handle_call(query, user_id, context)
        elif action == "game_check":
            await self.handle_check(query, user_id)
        elif action == "game_raise":
            await self.handle_raise_prompt(query, user_id)
    
    async def handle_fold(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–ª–¥–∞"""
        game = self.active_games[user_id]
        
        await query.edit_message_text(
            f"‚ùå –í—ã —Å–±—Ä–æ—Å–∏–ª–∏ –∫–∞—Ä—Ç—ã.\n"
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–∞–Ω–∫ –¥–æ—Å—Ç–∞–µ—Ç—Å—è –æ–ø–ø–æ–Ω–µ–Ω—Ç—É.\n\n"
            f"–î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_game"
        )
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
        del self.active_games[user_id]
    
    async def handle_call(self, query, user_id, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–∞"""
        game = self.active_games[user_id]
        player = f"user_{user_id}"
        
        call_amount = game.current_bet
        game.player_stacks[player] -= call_amount
        game.pot += call_amount
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ AI - –≤—Å–µ–≥–¥–∞ –∫–æ–ª–ª
        ai_player = "AI_Fish"
        game.player_stacks[ai_player] -= call_amount
        game.pot += call_amount
        
        response_text = (
            f"üì• –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {call_amount} BB\n"
            f"ü§ñ AI: –∫–æ–ª–ª\n\n"
            f"üí∞ –ë–∞–Ω–∫: {game.pot} BB\n"
            f"üíµ –í–∞—à —Å—Ç–µ–∫: {game.player_stacks[player]} BB"
        )
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É - —Ä–∞–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —É–ª–∏—Ü—É
        if len(game.community_cards) == 0:
            game.deal_flop()
            response_text += f"\n\nüÉè –§–ª–æ–ø: {' '.join(str(card) for card in game.community_cards)}"
        elif len(game.community_cards) == 3:
            game.deal_turn()
            response_text += f"\n\nüÉè –¢–µ—Ä–Ω: {game.community_cards[-1]}"
        elif len(game.community_cards) == 4:
            game.deal_river()
            response_text += f"\n\nüÉè –†–∏–≤–µ—Ä: {game.community_cards[-1]}"
        else:
            # –®–æ—É–¥–∞—É–Ω - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winners = game.get_winner()
            response_text += f"\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winners[0] if 'user' in winners[0] else 'AI'}"
            response_text += f"\nüéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {game.evaluate_showdown()[winners[0]][0].name}"
            del self.active_games[user_id]
            await query.edit_message_text(response_text)
            return
        
        await query.edit_message_text(response_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —É–ª–∏—Ü—ã
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await self.show_game_actions_by_chat(context, query.message.chat_id, user_id)
    
    async def show_game_actions_by_chat(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ chat_id"""
        game = self.active_games.get(user_id)
        if not game:
            return
        
        keyboard = [
            [InlineKeyboardButton("üì• –ö–æ–ª–ª", callback_data="game_call")],
            [InlineKeyboardButton("üì§ –†–µ–π–∑", callback_data="game_raise")],
            [InlineKeyboardButton("‚ùå –§–æ–ª–¥", callback_data="game_fold")],
            [InlineKeyboardButton("‚öñÔ∏è –ß–µ–∫", callback_data="game_check")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def handle_check(self, query, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞"""
        await query.edit_message_text(
            "‚öñÔ∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥\n"
            "ü§ñ AI: —á–µ–∫\n\n"
            "–£–ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π..."
        )
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
    
    async def handle_raise_prompt(self, query, user_id):
        """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–π–∑–∞"""
        await query.edit_message_text(
            "üì§ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ (–≤ BB):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º"
        )
        # –ó–¥–µ—Å—å –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (show_help, settings, handle_message –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ Poker Mentor - –ü–æ–º–æ—â—å

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/settings - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/test_game - –ë—ã—Å—Ç—Ä–æ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
‚Ä¢ üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É - –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ - —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞–∑–¥–∞—á—É
‚Ä¢ üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ üìö –û–±—É—á–µ–Ω–∏–µ - –∏–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é –ø–æ–∫–µ—Ä–∞
‚Ä¢ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        """
        await update.message.reply_text(help_text)
    
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        await update.message.reply_text(
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get('DATABASE_URL', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')}\n"
            f"‚Ä¢ –°—Ç–∞–≤–∫–∏: {config.get('DEFAULT_STAKE', '1/2')}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.txt"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user = update.effective_user
        
        if text == "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞":
            await self.quick_game(update, context)
        elif text == "üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏":
            await self.analyze_hand(update, context)
        elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_stats(update, context)
        elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await self.show_profile(update, context)
        elif text == "üìö –û–±—É—á–µ–Ω–∏–µ":
            await self.show_learning(update, context)
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É":
            await self.setup_game(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
    async def quick_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã"""
        await update.message.reply_text(
            "üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –∏–≥—Ä—É!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_game –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏."
        )
    
    async def analyze_hand(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏"""
        await update.message.reply_text(
            "üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–∞—á–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ä–∞–∑–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ü–æ–∑–∏—Ü–∏—è: [–≤–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è]\n"
            "–ö–∞—Ä—Ç—ã: [–≤–∞—à–∏ –∫–∞—Ä—Ç—ã]\n" 
            "–î–µ–π—Å—Ç–≤–∏—è: [—Ö–æ–¥ —Ä–∞–∑–¥–∞—á–∏]\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞."
        )
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await update.message.reply_text(
            "üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "üìä –û–±—â–∞—è:\n"
            "‚Ä¢ –°—ã–≥—Ä–∞–Ω–æ —Ä–∞–∑–¥–∞—á: 0\n"
            "‚Ä¢ Winrate: 0%\n"
            "‚Ä¢ –õ—É—á—à–∞—è —Ä—É–∫–∞: -\n\n"
            "üéØ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
            "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∏–≥—Ä!"
        )
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        user = update.effective_user
        await update.message.reply_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"ID: {user.id}\n"
            f"–ò–º—è: {user.first_name}\n"
            f"Username: @{user.username if user.username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫ üéì\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ!"
        )
    
    async def show_learning(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"""
        await update.message.reply_text(
            "üìö –û–±—É—á–µ–Ω–∏–µ –ø–æ–∫–µ—Ä—É\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
            "‚Ä¢ üìñ –û—Å–Ω–æ–≤—ã –ø–æ–∫–µ—Ä–∞\n"
            "‚Ä¢ üéØ –ü—Ä–µ—Ñ–ª–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n" 
            "‚Ä¢ üìä –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø–æ–∫–µ—Ä–∞\n"
            "‚Ä¢ üÉè –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–≥—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!"
        )
    
    async def setup_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã"""
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "‚Ä¢ –¢–∏–ø –∏–≥—Ä—ã: Cash/Tournament\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞\n"
            "‚Ä¢ –°—Ç–∏–ª—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Poker Mentor Bot...")
        print("ü§ñ –ó–∞–ø—É—Å–∫ Poker Mentor Bot...")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        self.application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        bot = PokerMentorBot()
        bot.run()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª config.txt")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")