import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from app.config import config
from app.database import db
from app.game_menus import GameMenus, TextTemplates
from app.game_manager import GameManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PokerMentorBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        is_valid, message = config.validate()
        if not is_valid:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: {message}")
            raise ValueError(message)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä
        self.game_manager = GameManager()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.token = config.get('TELEGRAM_BOT_TOKEN')
        self.application = Application.builder().token(self.token).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        logger.info("Poker Mentor Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("settings", self._handle_settings))
        self.application.add_handler(CommandHandler("test_game", self._handle_test_game))
        self.application.add_handler(CommandHandler("choose_ai", self._handle_choose_ai))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(CallbackQueryHandler(self._handle_callback_query))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))
    
    # ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    
    async def _handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user = db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = db.get_user_stats(db_user['id'])
        hands_played = user_stats['total_hands_played'] if user_stats else 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = TextTemplates.get_welcome_text(
            user.first_name, db_user['level'], hands_played
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=GameMenus.get_main_menu()
        )
    
    async def _handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(TextTemplates.get_help_text())
    
    async def _handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await update.message.reply_text(
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get('DATABASE_URL', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')}\n"
            f"‚Ä¢ –°—Ç–∞–≤–∫–∏: {config.get('DEFAULT_STAKE', '1/2')}\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª config.txt"
        )
    
    async def _handle_test_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_game"""
        user_id = str(update.effective_user.id)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
        game = self.game_manager.create_game(user_id, "fish")
        game_state = self.game_manager.get_game_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
        game_text = TextTemplates.get_game_start_text(
            "Fish", 
            GameMenus.get_ai_description("fish"),
            game_state["user_cards"],
            game_state["user_stack"],
            game_state["pot"]
        )
        
        await update.message.reply_text(game_text)
        await self._show_game_actions(update, context, user_id)
    
    async def _handle_choose_ai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /choose_ai"""
        await update.message.reply_text(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞:",
            reply_markup=GameMenus.get_ai_selection_menu()
        )
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====
    
    async def _handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(update.effective_user.id)
        callback_data = query.data
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä AI
        if callback_data.startswith("ai_"):
            ai_type = callback_data[3:]
            await self._start_game_with_ai(query, user_id, ai_type)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        elif callback_data.startswith("game_"):
            action = callback_data[5:]  # –£–±–∏—Ä–∞–µ–º "game_"
            await self._handle_game_action(query, user_id, action)
    
    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user = update.effective_user
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞":
            await self._handle_test_game(update, context)
        elif text == "üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏":
            await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await update.message.reply_text("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await update.message.reply_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "üìö –û–±—É—á–µ–Ω–∏–µ":
            await update.message.reply_text("üìö –û–±—É—á–µ–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É":
            await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
    # ===== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====
    
    async def _start_game_with_ai(self, query, user_id: str, ai_type: str):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º AI"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            game = self.game_manager.create_game(user_id, ai_type)
            game_state = self.game_manager.get_game_state(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ
            game_text = TextTemplates.get_game_start_text(
                game_state["ai_name"],
                GameMenus.get_ai_description(ai_type),
                game_state["user_cards"],
                game_state["user_stack"],
                game_state["pot"]
            )
            
            await query.edit_message_text(game_text)
            await self._show_game_actions_by_chat(
                query, query.message.chat_id, user_id
            )
            
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: {e}")
    
    async def _handle_game_action(self, query, user_id: str, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä
        result = self.game_manager.process_player_action(user_id, action)
        
        if "error" in result:
            await query.edit_message_text(result["error"])
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = result["message"]
        if "ai_message" in result:
            response_text += f"\n{result['ai_message']}"
        
        response_text += f"\n\nüí∞ –ë–∞–Ω–∫: {result['pot']} BB"
        response_text += f"\nüíµ –í–∞—à —Å—Ç–µ–∫: {result['player_stack']} BB"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ community cards
        if result.get("community_cards"):
            street = "–§–ª–æ–ø" if len(result["community_cards"]) == 3 else "–¢–µ—Ä–Ω" if len(result["community_cards"]) == 4 else "–†–∏–≤–µ—Ä"
            response_text += f"\n\nüÉè {street}: {' '.join(str(card) for card in result['community_cards'])}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if not result.get("game_continues", True):
            if "winner" in result:
                response_text += f"\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {result['winner']}"
                response_text += f"\nüéØ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è: {result['winning_hand']}"
            self.game_manager.end_game(user_id)
            await query.edit_message_text(response_text)
            return
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        await query.edit_message_text(response_text)
        await self._show_game_actions_by_chat(query, query.message.chat_id, user_id)
    
    # ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø =====
    
    async def _show_game_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=GameMenus.get_game_actions_menu()
        )
    
    async def _show_game_actions_by_chat(self, update, chat_id: int, user_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ chat_id"""
        await update._bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=GameMenus.get_game_actions_menu()
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Poker Mentor Bot...")
        print("ü§ñ –ó–∞–ø—É—Å–∫ Poker Mentor Bot...")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        self.application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        bot = PokerMentorBot()
        bot.run()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª config.txt")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")