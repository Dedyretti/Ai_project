from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from app.ai_opponents import AIFactory
from typing import Dict, List, Any, Optional  # –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ

class GameMenus:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    @staticmethod
    def get_main_menu():
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            ["üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É"],
            ["üìä –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏", "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üìö –û–±—É—á–µ–Ω–∏–µ", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def get_ai_selection_menu():
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton("üêü Fish AI", callback_data="ai_fish")],
            [InlineKeyboardButton("üõ°Ô∏è Nit AI", callback_data="ai_nit")],
            [InlineKeyboardButton("üéØ TAG AI", callback_data="ai_tag")],
            [InlineKeyboardButton("‚ö° LAG AI", callback_data="ai_lag")],
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def get_game_actions_menu():
        """–ú–µ–Ω—é –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üì• –ö–æ–ª–ª", callback_data="game_call")],
            [InlineKeyboardButton("üì§ –†–µ–π–∑", callback_data="game_raise")],
            [InlineKeyboardButton("‚ùå –§–æ–ª–¥", callback_data="game_fold")],
            [InlineKeyboardButton("‚öñÔ∏è –ß–µ–∫", callback_data="game_check")],
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def get_ai_description(ai_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞"""
        return AIFactory.get_ai_description(ai_type)

class TextTemplates:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    @staticmethod
    def get_welcome_text(user_name: str, level: str, hands_played: int) -> str:
        return f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Mentor, {user_name}!

–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level.title()} üéì
–°—ã–≥—Ä–∞–Ω–æ —Ä–∞–∑–¥–∞—á: {hands_played}

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üéÆ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ AI —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ä–∞–∑–¥–∞—á  
‚Ä¢ üìö –û–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!

üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_game
        """
    
    @staticmethod
    def get_game_start_text(ai_name: str, ai_description: str, user_cards: list, user_stack: int, pot: int) -> str:
        return (
            f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"ü§ñ –û–ø–ø–æ–Ω–µ–Ω—Ç: {ai_name}\n"
            f"üìù {ai_description}\n\n"
            f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards[0]} {user_cards[1]}\n"
            f"üí∞ –í–∞—à —Å—Ç–µ–∫: {user_stack} BB\n"
            f"üè¶ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {pot} BB\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    @staticmethod
    def get_help_text() -> str:
        return """
ü§ñ Poker Mentor - –ü–æ–º–æ—â—å

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/settings - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/test_game - –ë—ã—Å—Ç—Ä–æ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
/choose_ai - –í—ã–±—Ä–∞—Ç—å AI –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        """
    
    @staticmethod
    def get_hand_analysis_text(analysis: Dict) -> str:
        """–¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä—É–∫–∏"""
        return f"""
üìä **–ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏: {analysis['hand']}**

üí™ **–°–∏–ª–∞:** {analysis['strength']:.2f}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {analysis['category']}
üé™ **–ü–æ–∑–∏—Ü–∏—è:** {analysis['position']}

üìã **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join('‚Ä¢ ' + rec for rec in analysis['recommendations'])}
        """
    
    @staticmethod
    def get_postflop_analysis_text(analysis: Dict) -> str:
        """–¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞"""
        return f"""
üéØ **–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞**

üìà **–≠–∫–≤–∏—Ç–∏:** {analysis['equity']:.1%}
üí™ **–°–∏–ª–∞ —Ä—É–∫–∏:** {analysis['hand_strength']:.2f}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join('‚Ä¢ ' + rec for rec in analysis['recommendations'])}
        """
    
    @staticmethod
    def get_hand_history_analysis_text(analysis: Dict) -> str:
        """–¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–∞—á–∏"""
        rating_emoji = "‚≠ê" * analysis['rating']
        
        text = f"""
üìà **–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–∞—á–∏**

üèÜ **–†–µ–π—Ç–∏–Ω–≥:** {analysis['rating']}/10 {rating_emoji}

"""
        
        if analysis['mistakes']:
            text += f"‚ùå **–û—à–∏–±–∫–∏:**\n{chr(10).join('‚Ä¢ ' + mistake for mistake in analysis['mistakes'])}\n\n"
        
        if analysis['good_plays']:
            text += f"‚úÖ **–•–æ—Ä–æ—à–∏–µ —Ä–µ—à–µ–Ω–∏—è:**\n{chr(10).join('‚Ä¢ ' + play for play in analysis['good_plays'])}\n\n"
        
        if analysis['improvement_tips']:
            text += f"üí° **–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**\n{chr(10).join('‚Ä¢ ' + tip for tip in analysis['improvement_tips'])}"
        
        return text

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ–Ω—é
class AnalysisMenus:
    """–ú–µ–Ω—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    @staticmethod
    def get_analysis_menu():
        """–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞"""
        keyboard = [
            [InlineKeyboardButton("üÉè –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Ä—É–∫–∏", callback_data="analyze_preflop")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—Ñ–ª–æ–ø–∞", callback_data="analyze_postflop")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–∞—á–∏", callback_data="analyze_hand_history")],
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def get_position_selection_menu():
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        keyboard = [
            [InlineKeyboardButton("üé™ –†–∞–Ω–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", callback_data="position_early")],
            [InlineKeyboardButton("üé™ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", callback_data="position_middle")],
            [InlineKeyboardButton("üé™ –ü–æ–∑–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", callback_data="position_late")],
            [InlineKeyboardButton("üé™ –ë–ª–∞–π–Ω–¥—ã", callback_data="position_blinds")],
        ]
        return InlineKeyboardMarkup(keyboard) 
class AnalysisMenus:
    @staticmethod
    async def show_analysis_options(update, context):
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
        keyboard = [
            ["–ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏", "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä"],
            ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def handle_hand_analysis(update, context):
        # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä—É–∫–∏
        pass
    
    @staticmethod
    async def handle_game_history(update, context):
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
        pass