import logging
from app.poker_engine import PokerGame, Action
from app.ai_opponents import AIFactory

logger = logging.getLogger(__name__)

class GameManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
    
    def __init__(self):
        self.active_games = {}
    
    def create_game(self, user_id: str, ai_type: str = "fish") -> PokerGame:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        ai_opponent = AIFactory.create_ai(ai_type)
        
        game = PokerGame([f"user_{user_id}", ai_opponent.name])
        game.ai_opponent = ai_opponent
        game.start_hand()
        game.post_blinds()
        
        self.active_games[user_id] = game
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å AI {ai_type}")
        
        return game
    
    def get_game(self, user_id: str) -> PokerGame:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.active_games.get(user_id)
    
    def end_game(self, user_id: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"""
        if user_id in self.active_games:
            del self.active_games[user_id]
            logger.info(f"–ò–≥—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def process_player_action(self, user_id: str, action: str, amount: int = 0) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞"""
        game = self.get_game(user_id)
        if not game:
            return {"error": "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        player = f"user_{user_id}"
        result = {
            "player_action": action,
            "player_amount": amount,
            "ai_action": None,
            "ai_amount": 0,
            "pot": game.pot,
            "player_stack": game.player_stacks[player],
            "community_cards": game.community_cards.copy(),
            "game_continues": True
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
        if action == "fold":
            game.player_stacks[player] -= 0
            result["game_continues"] = False
            result["message"] = "‚ùå –í—ã —Å–±—Ä–æ—Å–∏–ª–∏ –∫–∞—Ä—Ç—ã."
            
        elif action == "call":
            call_amount = game.current_bet
            game.player_stacks[player] -= call_amount
            game.pot += call_amount
            result["player_amount"] = call_amount
            result["message"] = f"üì• –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {call_amount} BB"
            
        elif action == "check":
            game.player_stacks[player] -= 0
            result["message"] = "‚öñÔ∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ö–æ–¥"
            
        elif action == "raise":
            game.player_stacks[player] -= amount
            game.pot += amount
            game.current_bet = amount
            result["message"] = f"üì§ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–π–∑ {amount} BB"
        
        # –•–æ–¥ AI
        if result["game_continues"]:
            ai_action, ai_amount = self._process_ai_turn(game)
            result["ai_action"] = ai_action
            result["ai_amount"] = ai_amount
            result["ai_message"] = self._get_ai_action_text(ai_action, ai_amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ AI
            result["pot"] = game.pot
            result["player_stack"] = game.player_stacks[player]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
        if result["game_continues"]:
            result["game_continues"] = self._advance_game_street(game)
            if not result["game_continues"]:
                # –®–æ—É–¥–∞—É–Ω
                winners = game.get_winner()
                result["winner"] = "–í—ã" if 'user' in winners[0] else "AI"
                result["winning_hand"] = game.evaluate_showdown()[winners[0]][0].name
        
        return result
    
    def _process_ai_turn(self, game: PokerGame) -> tuple:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ–¥ AI"""
        ai_action, ai_amount = game.ai_opponent.decide_action(game, game.ai_opponent.name)
        
        if ai_action == Action.FOLD:
            game.player_stacks[game.ai_opponent.name] -= 0
        elif ai_action == Action.CHECK:
            game.player_stacks[game.ai_opponent.name] -= 0
        elif ai_action == Action.CALL:
            game.player_stacks[game.ai_opponent.name] -= ai_amount
            game.pot += ai_amount
        elif ai_action == Action.RAISE:
            game.player_stacks[game.ai_opponent.name] -= ai_amount
            game.pot += ai_amount
            game.current_bet = ai_amount
        
        return ai_action.value, ai_amount
    
    def _get_ai_action_text(self, ai_action: str, ai_amount: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è AI"""
        actions = {
            "fold": "ü§ñ AI: —Ñ–æ–ª–¥",
            "check": "ü§ñ AI: —á–µ–∫", 
            "call": f"ü§ñ AI: –∫–æ–ª–ª {ai_amount} BB",
            "raise": f"ü§ñ AI: —Ä–µ–π–∑ {ai_amount} BB"
        }
        return actions.get(ai_action, "ü§ñ AI: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    def _advance_game_street(self, game: PokerGame) -> bool:
        """–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —É–ª–∏—Ü—É –∏–≥—Ä—ã"""
        if len(game.community_cards) == 0:
            game.deal_flop()
            return True
        elif len(game.community_cards) == 3:
            game.deal_turn()
            return True
        elif len(game.community_cards) == 4:
            game.deal_river()
            return True
        else:
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            return False
    
    def get_game_state(self, user_id: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        game = self.get_game(user_id)
        if not game:
            return None
        
        player = f"user_{user_id}"
        return {
            "user_cards": game.player_cards[player],
            "user_stack": game.player_stacks[player],
            "pot": game.pot,
            "current_bet": game.current_bet,
            "community_cards": game.community_cards,
            "ai_name": game.ai_opponent.name if hasattr(game, 'ai_opponent') else "AI"
        }